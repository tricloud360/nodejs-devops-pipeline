pipeline {
    agent any

    environment {
        NVM_DIR = "/Users/sam/.nvm"
        NODE_VERSION = "22.9.0"
        APP_NAME = "nodejs-devops-pipeline"
        APP_VERSION = "1.0.0"
        DOCKER_IMAGE = "${APP_NAME}:${APP_VERSION}"
        PATH = "/usr/local/bin:${env.PATH}"
    }

    stages {
        stage('Environment Setup') {
            steps {
                script {
                    sh """
                        echo "PATH: ${PATH}"
                        echo "Current user: \$(whoami)"
                        echo "Home directory: \$HOME"
                        which docker || echo "Docker not found in PATH"
                        docker --version || echo "Docker CLI not working"
                        docker info || echo "Docker daemon not accessible"
                        
                        export NVM_DIR="${NVM_DIR}"
                        [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                        nvm use ${NODE_VERSION} || nvm use node
                        node -v
                        npm -v
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh """
                    export NVM_DIR="${NVM_DIR}"
                    [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                    nvm use ${NODE_VERSION} || nvm use node
                    npm install
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Test') {
            steps {
                sh """
                    export NVM_DIR="${NVM_DIR}"
                    [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                    nvm use ${NODE_VERSION} || nvm use node
                    npm test
                """
            }
        }

        stage('Deploy to Test') {
            steps {
                script {
                    sh """
                        docker stop ${APP_NAME}-test || true
                        docker rm ${APP_NAME}-test || true
                        docker run -d --name ${APP_NAME}-test -p 3000:3000 ${DOCKER_IMAGE}
                    """
                    echo "Application ${APP_NAME} version ${APP_VERSION} deployed to test environment: http://localhost:3000"
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh """
                        docker stop ${APP_NAME}-prod || true
                        docker rm ${APP_NAME}-prod || true
                        docker run -d --name ${APP_NAME}-prod -p 3001:3000 ${DOCKER_IMAGE}
                    """
                    echo "Application ${APP_NAME} version ${APP_VERSION} deployed to production environment: http://localhost:3001"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
// Path: Dockerfile